/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import </libobjc.A.h>
#import "NSURLSessionTaskDelegate.h"
#import "NSURLSessionDataDelegate.h"

@class NSURLSessionDataTask, BFTask, NSHTTPURLResponse, NSError, NSOutputStream, NSString, BFTaskCompletionSource;
@protocol OS_dispatch_queue;

@interface PFURLSessionDataTaskDelegate : NSObject <NSURLSessionTaskDelegate, NSURLSessionDataDelegate> {
	BFTaskCompletionSource* _taskCompletionSource;
	NSOutputStream* _dataOutputStream;
	NSURLSessionDataTask* _dataTask;
	NSHTTPURLResponse* _response;
	NSString* _responseString;
	NSObject<OS_dispatch_queue>* _dataQueue;
	id _result;
	NSError* _error;
	unsigned long long _downloadedBytes;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSError* error;
@property(retain, nonatomic) id result;
@property(readonly, assign, nonatomic) unsigned long long downloadedBytes;
@property(readonly, assign, nonatomic) NSOutputStream* dataOutputStream;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* dataQueue;
@property(copy, nonatomic) NSString* responseString;
@property(readonly, assign, nonatomic) NSHTTPURLResponse* response;
@property(readonly, assign, nonatomic) BFTask* resultTask;
@property(readonly, assign, nonatomic) NSURLSessionDataTask* dataTask;
+(id)taskDelegateForDataTask:(id)dataTask withCancellationToken:(id)cancellationToken;
-(void).cxx_destruct;
-(void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
-(void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)_closeDataOutputStream;
-(void)_writeDataOutputStreamData:(id)data;
-(void)_openDataOutputStream;
-(void)_cancel;
-(void)_taskDidCancel;
-(void)_taskDidFinish;
-(id)initForDataTask:(id)dataTask withCancellationToken:(id)cancellationToken;
-(id)init;
@end

