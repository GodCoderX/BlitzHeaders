/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import </libobjc.A.h>

@class PFFileManager, PFOfflineQueryLogic, NSMapTable, PFSQLiteDatabaseController;

@interface PFOfflineStore : NSObject {
	unsigned char _options;
	PFOfflineQueryLogic* _offlineQueryLogic;
	PFFileManager* _fileManager;
	NSObject* _lock;
	NSMapTable* _classNameAndObjectIdToObjectMap;
	NSMapTable* _fetchedObjects;
	NSMapTable* _objectToUUIDMap;
	NSMapTable* _UUIDToObjectMap;
	PFSQLiteDatabaseController* _databaseController;
}
@property(readonly, assign, nonatomic) PFSQLiteDatabaseController* databaseController;
@property(readonly, assign, nonatomic) PFOfflineQueryLogic* offlineQueryLogic;
@property(readonly, assign, nonatomic) NSMapTable* UUIDToObjectMap;
@property(readonly, assign, nonatomic) NSMapTable* objectToUUIDMap;
@property(readonly, assign, nonatomic) NSMapTable* fetchedObjects;
@property(readonly, assign, nonatomic) NSMapTable* classNameAndObjectIdToObjectMap;
@property(readonly, assign, nonatomic) NSObject* lock;
@property(readonly, assign, nonatomic) PFFileManager* fileManager;
@property(assign, nonatomic) unsigned char options;
+(id)_initializeTablesInBackgroundWithDatabaseController:(id)databaseController;
+(id)PFOfflineStoreDependenciesTableSchema;
+(id)PFOfflineStoreParseObjectsTableSchema;
-(void).cxx_destruct;
-(void)clearDatabase;
-(void)simulateReboot;
-(id)_performDatabaseOperationAsyncWithBlock:(id)block;
-(id)_performDatabaseTransactionAsyncWithBlock:(id)block;
-(id)_generateKeyForClassName:(id)className objectId:(id)anId;
-(void)updateObjectIdForObject:(id)object oldObjectId:(id)anId newObjectId:(id)anId3;
-(id)getOrCreateObjectWithoutDataWithClassName:(id)className objectId:(id)anId;
-(id)_getPointerAsyncWithUUID:(id)uuid database:(id)database;
-(id)getOrCreateUUIDAsyncForObject:(id)object database:(id)database;
-(id)_deleteObjectsWithUUIDs:(id)uuids database:(id)database;
-(id)_unpinKeyAsync:(id)async database:(id)database;
-(id)_unpinKeyAsync:(id)async;
-(id)unpinObjectAsync:(id)async;
-(id)deleteDataForObjectAsync:(id)objectAsync database:(id)database;
-(id)deleteDataForObjectAsync:(id)objectAsync;
-(id)_updateDataForObjectAsync:(id)objectAsync inDatabase:(id)database;
-(id)updateDataForObjectAsync:(id)objectAsync;
-(id)findAsyncForQueryState:(id)queryState user:(id)user pin:(id)pin isCount:(BOOL)count database:(id)database;
-(id)findAsyncForQueryState:(id)queryState user:(id)user pin:(id)pin isCount:(BOOL)count;
-(id)countAsyncForQueryState:(id)queryState user:(id)user pin:(id)pin;
-(id)findAsyncForQueryState:(id)queryState user:(id)user pin:(id)pin;
-(id)saveObjectLocallyAsync:(id)async key:(id)key database:(id)database;
-(id)saveObjectLocallyAsync:(id)async withChildren:(id)children database:(id)database;
-(id)saveObjectLocallyAsync:(id)async includeChildren:(BOOL)children database:(id)database;
-(id)saveObjectLocallyAsync:(id)async withChildren:(id)children;
-(id)saveObjectLocallyAsync:(id)async includeChildren:(BOOL)children;
-(id)fetchObjectLocallyAsync:(id)async database:(id)database;
-(id)fetchObjectLocallyAsync:(id)async;
-(id)initWithFileManager:(id)fileManager options:(unsigned char)options;
-(id)init;
@end

