/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import </libobjc.A.h>

@class NSMutableDictionary, NSString, TAGManager, TAGDiskLoadCallback, TAGPSupplementedResource, TAGResourceLoaderScheduler, TAGNetworkLoadCallback, TAGRuntime;
@protocol TAGResourceStorage;

__attribute__((visibility("hidden")))
@interface TAGContainer : NSObject {
	NSString* _ctfeServerAddress;
	BOOL _diskLoadFinished;
	NSString* _containerId;
	id<TAGResourceStorage> _resourceStorage;
	TAGManager* _tagManager;
	NSString* _ctfeUrlPathAndQuery;
	unsigned _numTokens;
	TAGPSupplementedResource* _lastLoadedSupplementedResource;
	TAGNetworkLoadCallback* _networkLoadCallback;
	TAGDiskLoadCallback* _diskLoadCallback;
	TAGResourceLoaderScheduler* _networkLoadScheduler;
	TAGRuntime* _runtime;
	NSMutableDictionary* _functionCallTagHandlers;
	NSMutableDictionary* _functionCallMacroHandlers;
	NSString* _resourceVersion;
	int _resourceFormatVersion;
	double _lastRefreshTime;
	double _lastRefreshMethodCalledTime;
}
@property(assign) double lastRefreshMethodCalledTime;
@property(assign) int resourceFormatVersion;
@property(copy) NSString* resourceVersion;
@property(assign) BOOL diskLoadFinished;
@property(retain) NSMutableDictionary* functionCallMacroHandlers;
@property(retain) NSMutableDictionary* functionCallTagHandlers;
@property(retain) TAGRuntime* runtime;
@property(retain) TAGResourceLoaderScheduler* networkLoadScheduler;
@property(retain) TAGDiskLoadCallback* diskLoadCallback;
@property(retain) TAGNetworkLoadCallback* networkLoadCallback;
@property(retain) TAGPSupplementedResource* lastLoadedSupplementedResource;
@property(assign) unsigned numTokens;
@property(copy, nonatomic) NSString* ctfeUrlPathAndQuery;
@property(copy, nonatomic) NSString* ctfeServerAddress;
@property(retain) TAGManager* tagManager;
@property(retain) id<TAGResourceStorage> resourceStorage;
@property(assign) double lastRefreshTime;
@property(readonly, copy, nonatomic) NSString* containerId;
+(int)maximumTokenCount;
+(double)minimumRefreshPeriodInBurstMode;
+(double)minimumRefreshPeriod;
+(double)refreshPeriodOnFailure;
+(double)refreshPeriodOnSuccess;
-(void).cxx_destruct;
-(BOOL)useAvailableTokenWithCurrentTime:(double)currentTime;
-(BOOL)isDefaultContainerRefreshMode;
-(void)createInitialContainer;
-(double)currentTimeInMilliseconds;
-(void)setupEvaluatorsWithExpandedResource:(id)expandedResource;
-(void)setSupplementals:(id)supplementals;
-(void)setupEvaluatorsWithResource:(id)resource;
-(void)saveResourceToDisk:(id)disk;
-(void)loadAfterDelay:(double)delay;
-(void)loadWithCallback:(id)callback resourceLoaderScheduler:(id)scheduler;
-(void)loadWithCallback:(id)callback;
-(void)evaluateTags:(id)tags;
-(id)functionCallMacroHandlerForMacro:(id)macro;
-(id)functionCallTagHandlerForTag:(id)tag;
-(void)registerFunctionCallMacroHandler:(id)handler forMacro:(id)macro;
-(void)registerFunctionCallTagHandler:(id)handler forTag:(id)tag;
-(BOOL)isDefault;
-(void)close;
-(void)refresh;
-(id)stringForKey:(id)key;
-(long long)int64ForKey:(id)key;
-(double)doubleForKey:(id)key;
-(BOOL)booleanForKey:(id)key;
-(id)initWithId:(id)anId tagManager:(id)manager;
-(id)initWithId:(id)anId tagManager:(id)manager resourceStorage:(id)storage;
@end

